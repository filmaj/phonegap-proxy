// JavaScript to be loaded by Cordova

<%- partial('partials/promise.js') %>
<%- partial('partials/socket.io.client.js') %>

function getErrorMessage(e) {
	if (e.stack) {
		return e.stack;
	} else if (e.name) {
		return e.name;
	} else {
		return e.toString();
	}
}

window.getRemoteFile = function(url, result) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onreadystatechange = function() {
      if (xhr.readyState===4) {
        result.resolve(xhr.responseText);
      };
    }
    xhr.send();
}

var socket = io.connect('http://<%= ip %>:<%= port %>');
socket.on("connect", function() {
    socket.emit("server", true);
});

socket.on('remoteEval', function (expression, fn) {
    var result = {};
    try {
    	// an empty promise that can be used be eval for
        // callbacks, ...
        var promise = new Promise();
        var res = eval(expression);
    	if (expression.indexOf('promise')!==-1) {
    		promise.then(function() {
    			result.success = true;
                result.args = Array.prototype.slice.call(arguments);
    			fn(result);
    		}, function() {
    			result.success = false;
                result.args = Array.prototype.slice.call(arguments);
    			fn(result);
    		});
    		return;
    	}
    	result.success = true;
        result.args = [res];
    } catch (e) {
        console.log("Error evaluating expression "+expression,e);
        result.success = false;
    	result.args = [getErrorMessage(e)];
    }
    fn(result);
});
